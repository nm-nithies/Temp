import os
import sys
import numpy as np
import logging

logger = logging.getLogger(__name__)

def validate_and_extract_constants(optimized_model, legalize_replace_input_with_constant):
    input_node_shapes, input_node_types = get_input_shapes_and_types(optimized_model)
    replace_input_node_dict = {}

    for pair in legalize_replace_input_with_constant:
        if len(pair) != 2:
            logger.error(f"[ERROR] Each item must be a pair of (input_name, value_or_file), got: {pair}")
            sys.exit(-1)

        input_name, val = pair
        if input_name not in input_node_shapes:
            logger.error(f"[ERROR] Input name '{input_name}' not found in graph nodes")
            sys.exit(-1)

        expected_dtype = input_node_types[input_name]
        expected_shape = input_node_shapes[input_name]

        if val.endswith('.npy'):
            if not os.path.isfile(val):
                logger.error(f"[ERROR] Numpy file '{val}' not found for input '{input_name}'")
                sys.exit(-1)
            try:
                loaded_val = np.load(val)
            except Exception as e:
                logger.error(f"[ERROR] Failed to load .npy file '{val}' for '{input_name}': {e}")
                sys.exit(-1)

            if loaded_val.dtype != expected_dtype:
                logger.error(f"[ERROR] '{input_name}' expected dtype {expected_dtype}, but got {loaded_val.dtype}")
                sys.exit(-1)

            if list(loaded_val.shape) != list(expected_shape):
                logger.error(f"[ERROR] '{input_name}' expected shape {expected_shape}, but got {loaded_val.shape}")
                sys.exit(-1)

            logger.info(f"Input '{input_name}' is replaced with file '{val}'")

        else:
            try:
                if np.issubdtype(expected_dtype, np.integer):
                    scalar_val = expected_dtype.type(int(val))
                elif np.issubdtype(expected_dtype, np.floating):
                    scalar_val = expected_dtype.type(float(val))
                else:
                    logger.error(f"[ERROR] Unsupported dtype '{expected_dtype}' for input '{input_name}'")
                    sys.exit(-1)

                if len(expected_shape) != 1:
                    logger.error(
                        f"[ERROR] Scalar replacement is only allowed for 1D input shapes.\n"
                        f"'{input_name}' has shape {expected_shape}. Use a .npy file instead."
                    )
                    sys.exit(-1)

                loaded_val = np.full(expected_shape, scalar_val, dtype=expected_dtype)
                logger.info(f"Input '{input_name}' is replaced with scalar value '{scalar_val}', broadcasted to shape {expected_shape}")

            except Exception as e:
                logger.error(f"[ERROR] Invalid value '{val}' for input '{input_name}': {e}")
                sys.exit(-1)

        replace_input_node_dict[input_name] = loaded_val

    return replace_input_node_dict
