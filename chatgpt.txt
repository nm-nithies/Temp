def get_cast_output(G, tensorDict, typeDict, layer):
    constant_input = tensorDict[G.nodes[layer]['input'][0]]
    dtype = typeDict[list(G.successors(layer))[0]]
    # output_tensor
    return constant_input.astype(dtype)


def get_add_output(G, tensorDict, layer):
    constant_input1 = tensorDict[G.nodes[layer]['input'][0]]
    constant_input2 = tensorDict[G.nodes[layer]['input'][1]]

    return np.add(constant_input1, constant_input2)


def get_unsqueeze_output(G, tensorDict, layer):
    constant_input = tensorDict[G.nodes[layer]['input'][0]]
    axis = list(tensorDict[G.nodes[layer]['input'][1]])

    return np.expand_dims(constant_input, axis=axis)


def get_concat_output(G, tensorDict, layer):
    constant_input = []
    for index in range(len(G.nodes[layer]['input'])):
        constant_input.append(tensorDict[G.nodes[layer]['input'][index]])
    axis = G.nodes[layer]['attr_dict']['axis']

    return np.concatenate(constant_input, axis=axis)

def get_reshape_output(G, tensorDict, layer):
    constant_input = tensorDict[G.nodes[layer]['input'][0]]
    shape_input = list(tensorDict[G.nodes[layer]['input'][1]])

    return constant_input.reshape(shape_input)
