import numpy as np
import os

def parse_replace_input_args(args, typedict, shapedict, G):
    """
    Parses --replace_input_with_constant args, validates presence, dtype, and shape.

    Args:
        args (list of str): e.g., ['input1', '1.0', 'input2', 'input2.npy']
        typedict (dict): input_name → np.dtype
        shapedict (dict): input_name → expected shape tuple, e.g., (1, 3, 224, 224)
        G (networkx.Graph): Graph where G.nodes contains node names

    Returns:
        dict: input_name → constant value (scalar or np.ndarray)

    Raises:
        ValueError, FileNotFoundError, TypeError, etc.
    """
    if len(args) % 2 != 0:
        raise ValueError("Arguments must be in pairs: (input_name, value_or_file)")

    result = {}
    i = 0
    while i < len(args):
        input_name = args[i]
        val = args[i + 1]

        # Validate presence
        if input_name not in G.nodes:
            raise ValueError(f"Input name '{input_name}' not found in graph nodes")
        if input_name not in typedict:
            raise ValueError(f"Input name '{input_name}' not found in typedict")
        if input_name not in shapedict:
            raise ValueError(f"Input name '{input_name}' not found in shapedict")

        expected_dtype = typedict[input_name]
        expected_shape = shapedict[input_name]

        # Load or parse value
        if val.endswith('.npy'):
            if not os.path.isfile(val):
                raise FileNotFoundError(f"Numpy file '{val}' not found for input '{input_name}'")
            try:
                loaded_val = np.load(val)
            except Exception as e:
                raise ValueError(f"Failed to load .npy file '{val}' for '{input_name}': {e}")

            if loaded_val.dtype != expected_dtype:
                raise TypeError(f"'{input_name}' expected dtype {expected_dtype}, but got {loaded_val.dtype}")

            if loaded_val.shape != expected_shape:
                raise ValueError(f"'{input_name}' expected shape {expected_shape}, but got {loaded_val.shape}")

        else:
            try:
                # Handle scalar values
                if np.issubdtype(expected_dtype, np.integer):
                    scalar_val = expected_dtype.type(int(val))
                elif np.issubdtype(expected_dtype, np.floating):
                    scalar_val = expected_dtype.type(float(val))
                else:
                    raise TypeError(f"Unsupported dtype '{expected_dtype}' for input '{input_name}'")
                # Convert to numpy array for shape checking
                loaded_val = np.array(scalar_val, dtype=expected_dtype)
            except Exception as e:
                raise ValueError(f"Invalid value '{val}' for input '{input_name}': {e}")

            if expected_shape != () and np.shape(loaded_val) != expected_shape:
                raise ValueError(
                    f"'{input_name}' expected shape {expected_shape}, got scalar (use .npy file instead)"
                )

        result[input_name] = loaded_val
        i += 2

    return result
