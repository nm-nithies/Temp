import torch
import torch.nn as nn

class ScatterPatternModel(nn.Module):
    def __init__(self):
        super(ScatterPatternModel, self).__init__()

    def forward(self, x0, x1, x2, x3):
        # Step 1: Unsqueeze on dim=0
        x0_u = x0.unsqueeze(0)  # [1, 3, 28, 36]
        x1_u = x1.unsqueeze(0)
        x2_u = x2.unsqueeze(0)
        x3_u = x3.unsqueeze(0)

        # Step 2: Concat on axis=0 -> [4, 3, 28, 36]
        concat = torch.cat([x0_u, x1_u, x2_u, x3_u], dim=0)

        # Step 3: Transpose [4, 3, 28, 36] -> [3, 4, 28, 36]
        transposed = concat.permute(1, 0, 2, 3)

        # Step 4: Gather along dim=1 with index 2 â†’ select 3rd slice along axis 1
        index = torch.tensor([2]).expand(transposed.size(0), 1).to(x0.device)
        gathered = torch.gather(
            transposed, dim=1,
            index=index.unsqueeze(-1).unsqueeze(-1).expand(-1, 1, transposed.size(2), transposed.size(3))
        )

        return gathered

# Instantiate the model
model = ScatterPatternModel()
model.eval()

# Dummy input tensors
x0 = torch.randn(3, 28, 36)
x1 = torch.randn(3, 28, 36)
x2 = torch.randn(3, 28, 36)
x3 = torch.randn(3, 28, 36)

# Export to ONNX
torch.onnx.export(
    model,
    (x0, x1, x2, x3),
    "scatter_pattern.onnx",
    input_names=["x0", "x1", "x2", "x3"],
    output_names=["output"],
    opset_version=13
)
