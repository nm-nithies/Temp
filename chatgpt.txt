
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.ops as ops
 
class ResizeConvModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv = nn.Conv2d(3, 8, kernel_size=3, stride=1, padding=1)
 
    def forward(self, x, size_tensor):
        # Using interpolate (resize)
        x = F.interpolate(x, size=size_tensor.tolist(), mode='bilinear', align_corners=False)
        x = self.conv(x)
        return x
 
# Sample input
x = torch.randn(1, 3, 64, 64)
target_size = torch.tensor([32, 32], dtype=torch.int64)
 
model = ResizeConvModel()
model.eval()
 
# Export to ONNX
torch.onnx.export(
    model,
    (x, target_size),
    "resize_conv.onnx",
    opset_version=13,  # Or 11/12, depending on your runtime support
    input_names=["input", "resize_size"],
    output_names=["output"],
  
